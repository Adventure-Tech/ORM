<?php

namespace AdventureTech\ORM;

use AdventureTech\ORM\Exceptions\EntityReflectionException;
use AdventureTech\ORM\Factories\Factory;
use AdventureTech\ORM\Mapping\Columns\ColumnAnnotation;
use AdventureTech\ORM\Mapping\Entity;
use AdventureTech\ORM\Mapping\Id;
use AdventureTech\ORM\Mapping\Linkers\Linker;
use AdventureTech\ORM\Mapping\Linkers\OwningLinker;
use AdventureTech\ORM\Mapping\ManagedColumns\ManagedColumnAnnotation;
use AdventureTech\ORM\Mapping\Mappers\Mapper;
use AdventureTech\ORM\Mapping\Relations\RelationAnnotation;
use AdventureTech\ORM\Mapping\SoftDeletes\SoftDeleteAnnotation;
use AdventureTech\ORM\Repository\Repository;
use ArgumentCountError;
use Illuminate\Support\Collection;
use Mockery\Mock;
use ReflectionClass;
use ReflectionException;
use ReflectionProperty;

/**
 * @template TEntity of object
 */
class EntityReflection
{
    /**
     * @var ReflectionClass<TEntity>
     */
    private ReflectionClass $reflectionClass;

    /**
     * @var Collection<string, Mapper<mixed>>
     */
    private Collection $mappers;

    /**
     * @var Collection<string, Linker<TEntity,object>>
     */
    private Collection $linkers;
    /**
     * @var Entity<TEntity>
     */
    private Entity $entityAttribute;
    private string $id;
    private bool $hasAutogeneratedId;
    /**
     * @var Collection<string,ManagedColumnAnnotation<mixed>>
     */
    private Collection $managedColumns;
    /**
     * @var Collection<string,SoftDeleteAnnotation>
     */
    private Collection $softDeletes;

    /**
     * @template A of object
     * @param  class-string<A>  $class
     * @return EntityReflection<A>
     */
    public static function new(string $class): EntityReflection
    {
        // TODO: cache
        if (isset(self::$fake)) {
            /** @var EntityReflection<A> $mock */
            $mock = self::$fake;
            return $mock;
        }
        return new self($class);
    }

    /**
     * @var Mock|EntityReflection<object>|null
     */
    private static Mock|EntityReflection|null $fake;

    /**
     * @return Mock|EntityReflection<object>
     */
    public static function fake(): Mock|EntityReflection
    {
        self::$fake = mock(self::class)->makePartial();
        return self::$fake;
    }

    public static function resetFake(): void
    {
        self::$fake = null;
    }

    /**
     * @param  class-string<TEntity>  $class
     */
    private function __construct(private readonly string $class)
    {
        try {
            /** @throws ReflectionException */
            $this->reflectionClass = new ReflectionClass($class);
        } catch (ReflectionException $reflectionException) {
            throw new EntityReflectionException(sprintf('Failed to reflect "%s".', $class), previous: $reflectionException);
        }
        $entityAttributes = $this->reflectionClass->getAttributes(Entity::class);
        if (count($entityAttributes) !== 1) {
            throw new EntityReflectionException(sprintf('Missing #[Entity] attribute annotation on "%s".', $class));
        }

        $this->entityAttribute = $entityAttributes[0]->newInstance();
        $this->mappers = Collection::empty();
        $this->linkers = Collection::empty();
        $this->managedColumns = Collection::empty();
        $this->softDeletes = Collection::empty();

        foreach ($this->reflectionClass->getProperties() as $property) {
            foreach ($property->getAttributes() as $attribute) {
                $attributeInstance = $attribute->newInstance();
                match (true) {
                    $attributeInstance instanceof Id => $this->setId($property->getName(), $attributeInstance),
                    $attributeInstance instanceof ColumnAnnotation => $this->registerMapper($property, $attributeInstance),
                    $attributeInstance instanceof RelationAnnotation => $this->registerLinker($property, $attributeInstance),
                    $attributeInstance instanceof ManagedColumnAnnotation => $this->managedColumns->put($property->getName(), $attributeInstance),
                    $attributeInstance instanceof SoftDeleteAnnotation => $this->softDeletes->put($property->getName(), $attributeInstance),
                    default => true,
                };
            }
        }
        if (!isset($this->id)) {
            throw new EntityReflectionException(sprintf(
                'ID column missing on "%s". Annotate a property with the #[Id] attribute.',
                $this->class
            ));
        }
        if (!$this->mappers->has($this->id)) {
            throw new EntityReflectionException(sprintf('Missing mapper annotation for the ID column "%s" on "%s"', $this->id, $this->class));
        }
    }

    /**
     * @return TEntity
     */
    public function newInstance()
    {
        try {
            return $this->reflectionClass->newInstance();
        } catch (ReflectionException | ArgumentCountError $e) {
            throw new EntityReflectionException(sprintf('Failed to instantiate entity of type "%s".', $this->class), previous: $e);
        }
    }

    /**
     * @return string
     */
    public function getTableName(): string
    {
        return $this->entityAttribute->getTable($this->class);
    }

    /**
     * @return string
     */
    public function getIdColumn(): string
    {
        /** @var Mapper<mixed> $mapper */
        $mapper = $this->getMappers()->get($this->getIdProperty());
        return $mapper->getColumnNames()[0];
    }
    /**
     * @return string
     */
    public function getIdProperty(): string
    {
        return $this->id;
    }

    /**
     * @return Collection<string, Mapper<mixed>>
     */
    public function getMappers(): Collection
    {
        return $this->mappers;
    }

    /**
     * @return Collection<string,Linker<TEntity,object>&OwningLinker>
     */
    public function getOwningLinkers(): Collection
    {
        /** @var Collection<string,Linker<TEntity,object>&OwningLinker> $owningLinkers */
        $owningLinkers = $this->linkers->filter(fn(Linker $linker) => $linker instanceof OwningLinker);
        return $owningLinkers;
    }

    /**
     * @param  string  $relation
     * @return Linker<TEntity,object>
     */
    public function getLinker(string $relation): Linker
    {
        if (!$this->linkers->has($relation)) {
            throw new EntityReflectionException(sprintf(
                'Missing mapping for relation "%s" on "%s". Mapped relations are: "%s".',
                $relation,
                $this->class,
                $this->linkers->keys()->implode('", "')
            ));
        }
        return $this->linkers[$relation];
    }

    /**
     * @return class-string<TEntity>
     */
    public function getClass(): string
    {
        return $this->class;
    }

    /**
     * @return array<string, string>
     */
    public function getSelectColumns(): array
    {
        $columnNames = [];
        foreach ($this->mappers as $mapper) {
            foreach ($mapper->getColumnNames() as $columnName) {
                $columnNames[$columnName] = $columnName;
            }
        }
        foreach ($this->linkers as $linker) {
            if ($linker instanceof OwningLinker) {
                $columnNames[$linker->getForeignKey()] = $linker->getForeignKey();
            }
        }
        return $columnNames;
    }

    /**
     * @return class-string<Repository<object>>|null
     */
    public function getRepository(): ?string
    {
        return $this->entityAttribute->getRepository();
    }

    /**
     * @return class-string<Factory<object>>|null
     */
    public function getFactory(): ?string
    {
        return $this->entityAttribute->getFactory();
    }

    /**
     * @return Collection<string,ManagedColumnAnnotation<mixed>>
     */
    public function getManagedColumns(): Collection
    {
        return $this->managedColumns;
    }

    /**
     * @return Collection<string,SoftDeleteAnnotation>
     */
    public function getSoftDeletes(): Collection
    {
        return $this->softDeletes;
    }

    private function setId(string $property, Id $attribute): void
    {
        if (isset($this->id)) {
            throw new EntityReflectionException(sprintf('Multiple ID columns defined on "%s" which is not supported.', $this->class));
        }
        $this->id = $property;
        $this->hasAutogeneratedId = $attribute->autogenerated;
    }

    /**
     * @param  ColumnAnnotation  $column
     * @param  ReflectionProperty  $property
     * @return void
     */
    private function registerMapper(ReflectionProperty $property, ColumnAnnotation $column): void
    {
        $this->mappers->put(
            $property->getName(),
            $column->getMapper($property)
        );
    }

    /**
     * @param  RelationAnnotation<TEntity,object>  $relationAnnotation
     * @param  ReflectionProperty  $property
     * @return void
     */
    private function registerLinker(ReflectionProperty $property, RelationAnnotation $relationAnnotation): void
    {
        $propertyName = $property->getName();
        /** @var class-string $propertyType */
        $propertyType = $this->getPropertyType($propertyName);
        $this->linkers->put(
            $propertyName,
            $relationAnnotation->getLinker($propertyName, $propertyType, $this->class)
        );
    }

    public function allowsNull(string $property): bool
    {
        return ColumnPropertyService::allowsNull($this->reflectionClass->getProperty($property));
    }

    public function getPropertyType(string $property): string
    {
        return ColumnPropertyService::getPropertyType($this->reflectionClass->getProperty($property));
    }

    public function getDefaultValue(string $property): mixed
    {
        return ColumnPropertyService::getDefaultValue($this->reflectionClass->getProperty($property));
    }

    /**
     * @return bool
     */
    public function hasAutogeneratedId(): bool
    {
        return $this->hasAutogeneratedId;
    }
}
