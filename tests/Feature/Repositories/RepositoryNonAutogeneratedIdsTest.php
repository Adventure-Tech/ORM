<?php

use AdventureTech\ORM\Exceptions\MissingIdValueException;
use AdventureTech\ORM\Exceptions\RecordNotFoundException;
use AdventureTech\ORM\Repository\Repository;
use AdventureTech\ORM\Tests\TestClasses\Entities\Account;
use AdventureTech\ORM\Tests\TestClasses\Persistence\AccountPersistence;
use Illuminate\Database\QueryException;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

test('Can get all entities with non-autogenerated ID column via repository', function () {
    $uuid = (string) Str::uuid();
    DB::table('es_accounts')->insert(['uuid' => $uuid, 'name' => 'CASH', 'amount' => 0]);

    $accounts = Repository::new(Account::class)->get();

    expect($accounts)->toHaveCount(1)
        ->and($accounts->first())
        ->uuid->toBe($uuid)
        ->name->toBe('CASH')
        ->amount->toBe(0);
});

test('Can find specific entity with non-autogenerated ID column via repository', function () {
    $uuidA = (string) Str::uuid();
    $uuidB = (string) Str::uuid();
    DB::table('es_accounts')->insert([
        ['uuid' => $uuidA, 'name' => 'CASH', 'amount' => 0],
        ['uuid' => $uuidB, 'name' => 'SALES', 'amount' => 0],
    ]);

    $account = Repository::new(Account::class)->find($uuidA);

        expect($account)
        ->uuid->toBe($uuidA)
        ->name->toBe('CASH')
        ->amount->toBe(0);
});

test('Can findOrFail specific entity with non-autogenerated ID column via repository', function () {
    $uuidA = (string) Str::uuid();
    $uuidB = (string) Str::uuid();
    DB::table('es_accounts')->insert([
        ['uuid' => $uuidA, 'name' => 'CASH', 'amount' => 0],
        ['uuid' => $uuidB, 'name' => 'SALES', 'amount' => 0],
    ]);

    $account = Repository::new(Account::class)->findOrFail($uuidA);

        expect($account)
        ->uuid->toBe($uuidA)
        ->name->toBe('CASH')
        ->amount->toBe(0);
});
