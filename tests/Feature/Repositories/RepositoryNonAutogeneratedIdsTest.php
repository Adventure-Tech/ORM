<?php

use AdventureTech\ORM\Repository\Repository;
use AdventureTech\ORM\Tests\TestClasses\Entities\Account;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;

test('Can get all entities with non-autogenerated ID column via repository', function () {
    $ulid = (string)Str::ulid();
    DB::table('es_accounts')->insert(['id' => $ulid, 'name' => 'CASH', 'amount' => 0]);

    $accounts = Repository::new(Account::class)->get();

    expect($accounts)->toHaveCount(1)
        ->and($accounts->first())
        ->id->toBe($ulid)
        ->name->toBe('CASH')
        ->amount->toBe(0);
});

test('Can find specific entity with non-autogenerated ID column via repository', function () {
    $ulidA = (string)Str::ulid();
    $ulidB = (string)Str::ulid();
    DB::table('es_accounts')->insert([
        ['id' => $ulidA, 'name' => 'CASH', 'amount' => 0],
        ['id' => $ulidB, 'name' => 'SALES', 'amount' => 0],
    ]);

    $account = Repository::new(Account::class)->find($ulidA);

    expect($account)
        ->id->toBe($ulidA)
        ->name->toBe('CASH')
        ->amount->toBe(0);
});

test('Can findOrFail specific entity with non-autogenerated ID column via repository', function () {
    $ulidA = (string)Str::ulid();
    $ulidB = (string)Str::ulid();
    DB::table('es_accounts')->insert([
        ['id' => $ulidA, 'name' => 'CASH', 'amount' => 0],
        ['id' => $ulidB, 'name' => 'SALES', 'amount' => 0],
    ]);

    $account = Repository::new(Account::class)->findOrFail($ulidA);

    expect($account)
        ->id->toBe($ulidA)
        ->name->toBe('CASH')
        ->amount->toBe(0);
});
